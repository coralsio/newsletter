<?php

namespace Tests\Feature;

use Corals\Modules\Newsletter\Facades\Newsletter;
use Corals\Modules\Newsletter\Models\Email;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class EmailsTest extends TestCase
{
    use DatabaseTransactions;

    protected $email;
    protected $mailLists = [];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_emails_store()
    {
        foreach (Newsletter::getAllMailLists() as $id => $mailList) {
            $this->mailLists[] = $id;
        }

        $subject = 'email';
        $emailBody = 'email';
        $types = ['send', 'draft'];
        $type = array_rand($types);

        $response = $this->post('newsletter/emails', [
            'mail_lists' => $this->mailLists,
            'subject' => $subject,
            'email_body' => $emailBody,
            'submit_type' => $types[$type]
        ]);

        $this->email = Email::query()->where('subject', $subject)
            ->where('status', $types[$type])
            ->first();

        $this->assertDatabaseHas('newsletter_emails', [
            'subject' => $this->email->subject,
            'email_body' => $this->email->email_body,
            'status' => $this->email->status
        ]);

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('newsletter/emails');
    }

    public function test_emails_show()
    {
        $this->test_emails_store();
        if ($this->email) {
            $response = $this->get('newsletter/emails/' . $this->email->hashed_id);

            $response->assertViewIs('Newsletter::emails.show')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_emails_edit()
    {
        $this->test_emails_store();
        if ($this->email) {
            if ($this->email->status == 'draft') {
                $response = $this->get('newsletter/emails/' . $this->email->hashed_id . '/edit');

                $response->assertViewIs('Newsletter::emails.create_edit')->assertStatus(200);
            }
        }
        $this->assertTrue(true);
    }

    public function test_emails_update()
    {
        $this->test_emails_store();

        if ($this->email) {
            if ($this->email->status == 'draft') {

                $response = $this->put('newsletter/emails/' . $this->email->hashed_id, [
                    'subject' => $this->email->subject,
                    'email_body' => $this->email->email_body,
                    'submit_type' => 'send',
                    'mail_lists' => $this->mailLists
                ]);

                $this->assertDatabaseHas('newsletter_emails', [
                    'subject' => $this->email->subject,
                    'email_body' => $this->email->email_body,
                    'status' => 'sent'
                ]);

                $response->assertRedirect('newsletter/emails');
            }
        }

        $this->assertTrue(true);
    }

    public function test_emails_delete()
    {
        $this->test_emails_store();

        if ($this->email) {
            $response = $this->delete('newsletter/emails/' . $this->email->hashed_id);

            $this->isSoftDeletableModel(Email::class);

            $response->assertStatus(200)->assertSeeText('Emails has been deleted successfully.');
        }
        $this->assertTrue(true);
    }

}

