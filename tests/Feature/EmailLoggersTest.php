<?php

namespace Tests\Feature;

use Corals\Modules\Newsletter\Facades\Newsletter;
use Corals\Modules\Newsletter\Models\Email;
use Corals\Modules\Newsletter\Models\EmailLogger;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class EmailLoggersTest extends TestCase
{
    use DatabaseTransactions;

    protected $emailLogger;
    protected $mailLists = [];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_email_loggers()
    {
        $this->mailLists = Newsletter::getAllMailLists();
        $mailList = array_rand($this->mailLists);

        $this->post('newsletter/emails', [
            'mail_lists' => [$mailList],
            'subject' => 'email',
            'email_body' => 'email',
            'submit_type' => 'draft',
        ]);

        $email = Email::query()->where('subject', 'email')
            ->where('status', 'draft')
            ->first();

        $this->emailLogger = EmailLogger::query()->where('email_id', $email->id)->first();

        $this->assertDatabaseHas('newsletter_emails', [
            'subject' => $email->subject,
            'email_body' => $email->email_body,
            'status' => $email->status,
        ]);

        $this->assertDatabaseHas('newsletter_email_logger', [
            'id' => $this->emailLogger->id,
            'email_id' => $this->emailLogger->email_id,
            'status' => $this->emailLogger->status,
        ]);
    }

    public function test_email_loggers_show()
    {
        $this->test_email_loggers();

        if ($this->emailLogger) {
            $response = $this->get('newsletter/email-loggers/' . $this->emailLogger->hashed_id);

            $response->assertViewIs('Newsletter::email_loggers.show')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_email_loggers_delete()
    {
        $this->test_email_loggers();

        if ($this->emailLogger) {
            $response = $this->delete('newsletter/email-loggers/' . $this->emailLogger->hashed_id);

            $this->isSoftDeletableModel(EmailLogger::class);

            $response->assertStatus(200)->assertSeeText('Email Stats has been deleted successfully.');
        }
        $this->assertTrue(true);
    }
}
